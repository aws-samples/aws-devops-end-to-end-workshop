AWSTemplateFormatVersion: 2010-09-09
# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform: AWS::Serverless-2016-10-31

# Shared configuration for all resources, more in
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
#Globals:
#  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
#    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

Parameters:
  AppId:
    Type: String
  ProjectName:
    Description: >-
      Used as a prefix for project resources.  Can be up to 30 characters,
      lowercase letters (a-z) only.
    Type: String
    Default: mybookstore
    AllowedPattern: '^[a-z]{1,30}'
    ConstraintDescription: >-
      The ProjectName can be up to 30 characters, lowercase letters (a-z)
      only.
Conditions:
  IADRegion: !Equals 
    - !Ref 'AWS::Region'
    - us-east-1
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-devops-end-to-end-workshop-us-east-1
      NeptuneDataBucket: aws-devops-end-to-end-workshop-neptune-us-east-1
    us-west-2:
      Bucket: aws-devops-end-to-end-workshop-us-west-2
      NeptuneDataBucket: aws-devops-end-to-end-workshop-neptune-us-west-2
    eu-central-1:
      Bucket: aws-devops-end-to-end-workshop-eu-central-1
      NeptuneDataBucket: aws-devops-end-to-end-workshop-neptune-eu-central-1
    eu-west-1:
      Bucket: aws-devops-end-to-end-workshop-eu-west-1
      NeptuneDataBucket: aws-devops-end-to-end-workshop-neptune-eu-west-1
  Constants:
    AppKeys:
      SeedRepository: 'https://s3.amazonaws.com/aws-devops-end-to-end-workshop-us-east-1/bookstore-webapp.zip'
    S3Keys:
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
Resources:
  FunctionGetBook:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-GetBook'
      CodeUri: ./
      Handler: src/demobookstore-GetBook/index.handler
      Runtime: nodejs16.x
      Role: !ImportValue 
       'Fn::Sub': '${ProjectName}-DynamoDbRoleARN'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
      Description: Get book by id
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
  FunctionListBooks:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-ListBooks'
      CodeUri: ./
      Handler: src/demobookstore-ListBooks/index.handler
      Runtime: nodejs16.x
      Role: !ImportValue 
        'Fn::Sub': '${ProjectName}-DynamoDbRoleARN'
      MemorySize: 128
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: !Sub '${ProjectName}-Books'
      Description: Get list of books by category
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
  FunctionGetBookPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionGetBook
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !ImportValue 
            'Fn::Sub': '${ProjectName}-AppApiRef'
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  FunctionListBooksPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionListBooks
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !ImportValue 
            'Fn::Sub': '${ProjectName}-AppApiRef'
          - /*
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 06a821b7-638e-471c-ab50-51710b73767c
  BooksApiRequestGET:
    DependsOn:
      - FunctionListBooksPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionListBooks
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.category: false
      ResourceId: !Ref BooksApiResource
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5a740957-6b64-4ddd-bd1d-3027df7fc6d5
  BooksApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BooksApiResource
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      AuthorizationType: "NONE"
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: f0f16a94-104a-431f-8c87-930f56274955
  BookItemApiRequestGET:
    DependsOn: FunctionGetBookPermissions
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionGetBook
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
      RequestParameters:
        method.request.path.id: true
      ResourceId: !Ref BookItemApiResource
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a311ee38-d902-4856-9f09-1d00d1bc8600
  BookItemApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref BookItemApiResource
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      AuthorizationType: "NONE"
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: c31e25ac-e338-4d21-9e4b-881a16e0a494
  BooksApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      ParentId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiParentId'
      PathPart: books
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e0ffbcc7-5f62-43ac-b377-47ec80a5a71e
  BookItemApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      ParentId: !Ref BooksApiResource
      PathPart: '{id}'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 25b4ecc5-9d47-49cb-b5c4-d03574eee62e
  APIDeployment:
    DependsOn:
      - BooksApiRequestGET
      - BooksApiRequestOPTIONS
      - BookItemApiRequestGET
      - BookItemApiRequestOPTIONS
    Type: 'AWS::ApiGateway::Deployment'
    DeletionPolicy: Retain
    Properties:
      Description: Prod deployment for API
      RestApiId: !ImportValue 
        'Fn::Sub': '${ProjectName}-AppApiRef'
      StageName: prod
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 278dda65-02c9-49fa-a19c-3dd7afd25683
